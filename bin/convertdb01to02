#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright 2009 Martin Altmayer
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation
#

"""Script to convert Omg's database from version 0.1 to version 0.2. Make a backup before using this script!"""

import sys
from omg import database as db,config

config.init({})

prefix = config.options.database.prefix
if not prefix:
    print("You must specify a table prefix for the version 0.2 tables in your config-file.")
    sys.exit()
    
db.connect()

print("Creating new tables...")
db.resetDatabase()
print("...done")

print("Copying data (except tags)...")
db.query("""INSERT INTO {}elements (id,file,toplevel,elements)
                (SELECT id,file,toplevel,elements FROM elements);""".format(prefix))
db.query("""INSERT INTO {}contents (container_id,position,element_id)
                (SELECT container_id,position,element_id FROM contents);""".format(prefix))
db.query("""INSERT INTO {}files (element_id,path,hash,verified,length)
                (SELECT element_id,path,hash,verified,length FROM files);""".format(prefix))

# Copying the tagids is a bit tricky since we can set the sortkeys only after referenced tag has been inserted (foreign key constraint). So insert in ascending order and set the sortkey to the first tag that is inserted (that with minimal id). Then update with the title tag.
minId = db.query("SELECT MIN(id) FROM tagids").getSingle()
titleId = db.query("SELECT id FROM tagids WHERE tagname = ?",config.options.tags.title_tag).getSingle()
db.query("""INSERT INTO {}tagids (id,tagname,tagtype,sortkey)
                (SELECT id,tagname,tagtype,{} FROM tagids ORDER BY id ASC);""".format(prefix,minId))
db.query("UPDATE {}tagids SET sortkey={}".format(prefix,titleId))
print("...done")

print("Copying tags...")
for tagid,tagname,tagtype in db.query("SELECT id,tagname,tagtype FROM {}tagids".format(prefix)):
    idIncrement = db.query("SELECT MAX(id) FROM {}values_{}".format(prefix,tagtype)).getSingle()
    if not isinstance(idIncrement, int):
        idIncrement = 0

    # Copy values
    if tagtype != "date":
        db.query("""INSERT INTO {}values_{} (id,tag_id,value) (SELECT {}+id,{},value FROM tag_{})"""
                                .format(prefix,tagtype,idIncrement,tagid,tagname))
    else: # Convert dates
        db.query("""INSERT INTO {}values_date (id,tag_id,value)
                    (SELECT {}+id,{},10000*YEAR(value)+100*MONTH(value)+DAY(value) FROM tag_{})"""
                            .format(prefix,idIncrement,tagid,tagname))
        
    # Copy relations
    db.query("""INSERT INTO {}tags (element_id,tag_id,value_id)
                 (SELECT element_id,tag_id,value_id+{} FROM tags WHERE tag_id = {})""".format(prefix,idIncrement,tagid))
print("...done")
