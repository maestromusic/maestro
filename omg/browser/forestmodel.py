#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright 2009 Martin Altmayer
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation
#
from PyQt4 import QtCore
from PyQt4.QtCore import Qt
from omg.models import Element

class Rootline:
    def __init__(self,parent,furtherRootline):
        self.parent = parent
        assert furtherRootline is None or isinstance(furtherRootline,Rootline)
        self.furtherRootline = furtherRootline

    def __str__(self):
        parentString = str(self.parent)
        furtherRootlineString = str(self.furtherRootline)
        return "<{0},{1}>".format(parentString,furtherRootlineString)


class ForestModel(QtCore.QAbstractItemModel):
    # The following list stores references to all Rootlines generated by this model as QModelIndex leads to Segmentation Faults if the Rootlines aren't referenced anymore. Unfortunately this list may become quite large, but I hope in a new version of PyQt this will be fixed (http://www.mail-archive.com/pyqt@riverbankcomputing.com/msg16046.html).
    _listOfRootlines = []
    
    # List of the roots of the trees stored in this model
    _roots = []

    def __init__(self,roots):
        QtCore.QAbstractItemModel.__init__(self)
        self._roots = roots
    
    def setRoots(self,roots):
        self._roots = roots
        self.reset()
        
    def parent(self,index):
        rootline = index.internalPointer()
        if rootline is None: # index refers to a top-level element
            return QtCore.QModelIndex()
        else:
            if rootline.furtherRootline is None: # The parent is a top-level element
                containingList = self._roots
            else: containingList = rootline.furtherRootline.parent.getElements()
        
        row = containingList.index(rootline.parent)
        return self.createIndex(row,0,rootline.furtherRootline)

    def index(self,row,column,index=QtCore.QModelIndex()):
        if not index.isValid():
            return self.createIndex(row,column,None)
        else:
            newRootline = Rootline(self.data(index),index.internalPointer())
            self._listOfRootlines.append(newRootline)
            return self.createIndex(row,column,newRootline)
        
    def data(self,index,role=Qt.DisplayRole):
        if not index.isValid() or index.column() != 0 or role != Qt.DisplayRole:
            return None
        else:
            rootline = index.internalPointer()
            if rootline is None:
                return self._roots[index.row()]
            else: return rootline.parent.getElements()[index.row()]
    
    def rowCount(self,index=QtCore.QModelIndex()):
        if not index.isValid():
            return len(self._roots)
        else: return self.data(index).getElementsCount()
        
    def columnCount(self,index=QtCore.QModelIndex()):
        return 1
        
    def flags(self,index):
        if not index.isValid():
            return Qt.ItemIsEnabled;
        else: return Qt.ItemIsEnabled | Qt.ItemIsSelectable